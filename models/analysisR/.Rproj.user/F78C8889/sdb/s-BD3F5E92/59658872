{
    "collab_server" : "",
    "contents" : "library(randomForest)\nlibrary(readr)\n\nsetwd('~/kaggle/renthop/')\ndf <- read.csv('models/analysisR/framed_data_2.csv', sep='\\t')\n\ndf$interest_level <- as.factor(df$interest_level)\ndf$price <- as.integer(df$price)\ndf$bedrooms <- as.double(df$bedrooms)\ndf$bathrooms <- as.double(df$bathrooms)\ndf$latitude <- as.double(df$latitude)\ndf$longitude <- as.double(df$longitude)\ndf$building_id <- as.factor(df$building_id)\ndf$manager_id <- as.factor(df$manager_id)\nfor(i in 13:length(colnames(df))) {\n  df[,colnames(df)[i]] <- as.logical(df[,colnames(df)[i]])\n}\n\ntrain_rows <- sample(c(TRUE, TRUE, FALSE), nrow(df), replace = TRUE)\ntrain <- df[train_rows,]\ntest <- df[!train_rows,]\n\n# with ntree = 2000, gives logloss of .80 using 2/3 of training set\n# remember, interaction handling is built in naturally\n# took 20 min to run with 1000 trees, gave logloss .67 using 2/3 training set\nrf <- randomForest(interest_level ~ price + bedrooms + bathrooms + \n                     latitude + longitude + #building_id + manager_id +\n                     common.outdoor.space + laundry.in.building +\n                     exclusive + hardwood + dining.room + terrace +\n                     doorman + fitness.center + balcony + prewar +\n                     wheelchair.access + swimming.pool + laundry.in.unit +\n                     elevator + high.speed.internet + hardwood.floors +\n                     outdoor.space + loft + roof.deck + new.construction +\n                     garden.patio + dishwasher + pre.war + no.fee +\n                     dogs.allowed + cats.allowed, train, ntree=500, importance=TRUE)\n\npredicted <- as.data.frame(predict(rf, test, type = \"prob\"))\n\nlogloss <- function(predicted_probs, actuals) {\n  correct_cols <- match(actuals, colnames(predicted_probs))\n  predicted_probs_of_actual <- as.list(c())\n  for(i in 1:dim(predicted)[1]) {\n    predicted_probs_of_actual <- append(predicted_probs_of_actual, predicted_probs[i, correct_cols[i]])\n  }\n  \n  cumulative_score = 0\n  for(i in 1:length(predicted_probs_of_actual)) {\n    cumulative_score <- cumulative_score + log(max(min(as.double(predicted_probs_of_actual[i]), 1 - 1e-15), 1e-15))\n  }\n  return(-1 * cumulative_score/length(predicted_probs_of_actual))\n}\n\nlogloss(predicted, test$interest_level)\n\n#mean(predicted == test$interest_level)\n \n#plot(test$interest_level, predicted)\n\nvarImpPlot(rf)\n",
    "created" : 1486679600801.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2903596670",
    "id" : "59658872",
    "lastKnownWriteTime" : 1488390832,
    "last_content_update" : 1488403720789,
    "path" : "~/kaggle/renthop/models/analysisR/random_forest_benchmark.R",
    "project_path" : "random_forest_benchmark.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}